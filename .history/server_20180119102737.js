const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const resolve = file => path.resolve(__dirname, file)
const { createBundleRenderer } = require('vue-server-renderer')

const isProd = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const serverInfo =
  `express/${require('express/package.json').version} ` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

const app = express()

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProd) {
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const template = fs.readFileSync(templatePath, 'utf-8')
  const bundle = require('./dist/vue-ssr-server-bundle.json')
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
    }
  )
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./public/logo-48.png'))
app.use('/dist', serve('./dist', true))
app.use('/public', serve('./public', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))


/*--------服务端模拟数据----------*/
app.use('/data', (req, res, next) => {
  res.send({
      "code": 1,
      "data": {
          "livePreList": [],
          "liveWodList": [{
              "appointStatus": 0,
              "image": "https://imgproxy.mtime.cn/get.ashx?uri=http://img5.mtime.cn/mg/2017/05/05/183558.90013339.jpg",
              "liveId": 634,
              "liveStatus": 4,
              "startTime": 1494313262000,
              "statistic": 64783,
              "title": "《超凡战队》首映礼发布会",
              "videoId": 0
            },
            {
              "appointStatus": 0,
              "image": "https://imgproxy.mtime.cn/get.ashx?uri=http://img5.mtime.cn/mg/2017/05/05/183558.90013339.jpg",
              "liveId": 634,
              "liveStatus": 4,
              "startTime": 1494313262000,
              "statistic": 64783,
              "title": "《超凡战队》首映礼发布会",
              "videoId": 0
            },
            {
              "appointStatus": 0,
              "image": "https://imgproxy.mtime.cn/get.ashx?uri=http://img5.mtime.cn/mg/2017/05/05/183558.90013339.jpg",
              "liveId": 634,
              "liveStatus": 4,
              "startTime": 1494313262000,
              "statistic": 64783,
              "title": "《超凡战队》首映礼发布会",
              "videoId": 0
            },
            {
              "appointStatus": 0,
              "image": "https://imgproxy.mtime.cn/get.ashx?uri=http://img5.mtime.cn/mg/2017/05/05/183558.90013339.jpg",
              "liveId": 634,
              "liveStatus": 4,
              "startTime": 1494313262000,
              "statistic": 64783,
              "title": "《超凡战队》首映礼发布会",
              "videoId": 0
            }],
          "livingList": [],
          "myAppointLiveList": []
      },
      "msg": "",
      "showMsg": ""
  })
})

app.use('/api/city',(req,res,next) => {
  res.send({
    data:{
      "recommendInfo": [{
        "id": 1,
        "imgUrl": "http://img1.qunarzz.com/sight/p0/1409/19/adca619faaab0898245dc4ec482b5722.jpg_140x140_80f63803.jpg",
        "alt": "故宫",
        "recname": "故宫",
        "explain": "东方宫殿建筑代表，世界宫殿建筑典范",
        "sale": "￥",
        "num": 20
      },
      {
        "imgUrl": "http://img1.qunarzz.com/sight/p0/1708/2b/2b3b94de99c0a425a3.img.jpg_140x140_97813766.jpg",
        "alt": "八达岭长城",
        "recname": "八达岭长城",
        "explain": "不到长城非好汉",
        "sale": "￥",
        "num": 25
      },
      {
        "imgUrl": "http://img1.qunarzz.com/sight/p0/1505/d2/d274c92de14c93da.water.jpg_140x140_e20be8e0.jpg",
        "alt": "颐和园",
        "recname": "颐和园",
        "explain": "保存完整的一座皇家行宫御苑",
        "sale": "￥",
        "num": 22
      },
      {
        "imgUrl": "http://img1.qunarzz.com/sight/p0/1508/a5/4003f9dd7bebf61eccbf64046e26d487.water.jpg_140x140_b05eb1df.jpg",
        "alt": "北京欢乐谷",
        "recname": "北京欢乐谷",
        "explain": "七大主题园区带你畅享北京欢乐谷",
        "sale": "￥",
        "num": 15
      },
      {
        "imgUrl": "http://img1.qunarzz.com/sight/p0/1708/2b/2b6378fd3b2e1d86a3.img.jpg_140x140_eae81520.jpg",
        "alt": "慕田峪长城",
        "recname": "慕田峪长城",
        "explain": "秀美长城，关键是人少",
        "sale": "￥",
        "num": 19.1
      }]
    }
  })
})


/*--------服务端模拟数据----------*/
function render (req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: '活动系统2.0', // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      //处理异常
      return handleError(err)
    }
    res.send(html)
    if (!isProd) {
      console.log(`whole request: ${Date.now() - s}ms`)
    }
  })
}

app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res))
})

const port = process.env.PORT || 8090
app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})



